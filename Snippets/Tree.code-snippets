{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "tree",
		"body": [
			"typedef int item;",
			"struct Tree",
			"{",
			"    long long n;              // number of vertex count",
			"    long long root = 1;       // root of the tree",
			"    vector<item> a;           // to store the value at each of the node",
			"    vector<vector<item>> adj; // to store the adjencency list info i.e for adj[i][j] if there then there is a node front i to adj[i][j]",
			" ",
			"    // constructor",
			"    Tree(long long ver, long long rooted)",
			"    {",
			"        n = ver;",
			"        root = rooted;",
			"        a.resize(n + 1, 0);",
			"        adj.resize(n + 1);",
			"    }",
			" ",
			"    // add edge to the tree",
			"    void add_edge(long long x, long long y)",
			"    {",
			"        adj[x].push_back(y);",
			"        adj[y].push_back(x);",
			"    }",
			" ",
			"    // remove an edge",
			"    void remove_edge(long long x, long long y)",
			"    {",
			"        bool flage = false;",
			"        for (long long i = 0; i < adj[x].size(); i++)",
			"        {",
			"            if (adj[x][i] == y)",
			"            {",
			"                flage = true;",
			"            }",
			"            if (flage)",
			"            {",
			"                adj[x][i]=adj[x][i+1];",
			"            }",
			"        }",
			"        if(flage)",
			"            adj[x].pop_back();",
			" ",
			"        flage = false;",
			"        for (long long i = 0; i < adj[y].size(); i++)",
			"        {",
			"            if (adj[y][i] == x)",
			"            {",
			"                flage = true;",
			"            }",
			"            if (flage)",
			"            {",
			"                adj[y][i]=adj[y][i+1];",
			"            }",
			"        }",
			"        if(flage)",
			"            adj[y].pop_back();",
			"    }",
			" ",
			"    // add value corresponding to the node",
			"    void add_value(long long i,long long val){",
			"        a[i]=val;",
			"    }",
			"};",
			" ",
			"$2"
		],
		"description": "General Tree implementation"
	}
}